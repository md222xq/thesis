[
  {
    "test": 1,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x941d225236464a25eb18076df7da6a91d0f95e9e.sol_Log.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** reentrancy"
    },
    "time_taken": "6.5771s"
  },
  {
    "test": 2,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol_Puppet.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE"
    },
    "time_taken": "5.1517s"
  },
  {
    "test": 3,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x52d2e0f9b01101a59b38a3d05c80b7618aeed984.sol_EtherGet.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** reentrancy\n\nThe `withdrawTokens()` function is vulnerable to reentrancy. An attacker can call `withdrawTokens()` to withdraw all of the tokens from the contract, and then call `withdrawTokens()` again before the first call has returned. This will allow the attacker to withdraw all of the tokens from the contract multiple times.\n\nTo fix this vulnerability, the `withdrawTokens()` function should be modified to check the balance of the contract after the transfer. If the balance is less than the amount being withdrawn, the function should revert."
    },
    "time_taken": "15.4472s"
  },
  {
    "test": 4,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_TokenBank.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** reentrancy\n\nThe `WithdrawToHolder()` function is vulnerable to reentrancy. An attacker can call `WithdrawToHolder()` to withdraw all of the tokens from the contract, and then call `WithdrawToHolder()` again before the first call has returned. This will allow the attacker to withdraw all of the tokens from the contract multiple times.\n\nTo fix this vulnerability, the `WithdrawToHolder()` function should be modified to check the balance of the contract after the transfer. If the balance is less than the amount being withdrawn, the function should revert.\n\nAdditionally, the `WitdrawTokenToHolder()` function is also vulnerable to reentrancy. It is possible for an attacker to call `WitdrawTokenToHolder()` to withdraw all of the tokens from the contract, and then call `WitdrawTokenToHolder()` again to withdraw all of the tokens from the contract again. This will allow the attacker to withdraw all of the tokens from the contract twice.\n\nTo fix this vulnerability, the `WitdrawTokenToHolder()` function should be modified to check the balance of the contract before and after the transfer. If the balance of the contract is less than the amount being withdrawn, the function should revert."
    },
    "time_taken": "10.0156s"
  },
  {
    "test": 5,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_unprotected0.sol_Unprotected.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\r\n\r\nThe contract you provided is safe from reentrancy attacks. The `changeOwner()` function is the only function that can modify the `_changeOwner` state variable, and it does not call any external contracts. Therefore, it is not possible for an attacker to reenter the `changeOwner()` function and modify the `_changeOwner` state variable multiple times."
    },
    "time_taken": "5.0792s"
  },
  {
    "test": 6,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol_Log.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\r\n\r\nThe contract you provided is safe from reentrancy attacks. The `AddMessage()` function is the only function that can modify the `_history` state variable, and it does not call any external contracts. Therefore, it is not possible for an attacker to reenter the `AddMessage()` function and modify the `_history` state variable multiple times.\n\nThe `History()` function does not modify any state variables, so it is also safe from reentrancy attacks."
    },
    "time_taken": "6.4638s"
  },
  {
    "test": 7,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_BECToken.sol_Pausable.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\n\nThe contract you provided is safe from reentrancy attacks. None of the functions in the contract call any external contracts, so it is not possible for an attacker to reenter a function and modify the state of the contract multiple times.\n\nAdditionally, the contract properly checks for authorization before allowing users to call certain functions. For example, the `transferOwnership()` function can only be called by the current owner of the contract, and the `unpause()` function can only be called if the contract is currently paused.\n\nOverall, the contract is well-written and secure from reentrancy attacks."
    },
    "time_taken": "6.0495s"
  },
  {
    "test": 8,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol_Log.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe `AddMessage()` function is vulnerable to reentrancy attacks. An attacker can call `AddMessage()` to add a message, and then call `AddMessage()` again before the first call has returned. This will allow the attacker to add multiple messages in the same transaction, even if they do not have enough funds to pay for all of them.\n\nTo fix this vulnerability, the `AddMessage()` function should be modified to require that the sender have enough funds to pay for the message before adding it. This can be done by checking the sender's balance before calling `CALLDATACOPY()`.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction AddMessage(address sender, uint256 value, string memory message) public nonPayable {\n  // Check that the sender has enough funds to pay for the message.\n  require(sender.balance >= value);\n\n  // Add the message to the history.\n  _history.push(History(sender, value, message));\n}\n```\n\nWith this fix in place, an attacker will not be able to add multiple messages in the same transaction, even if they do not have enough funds to pay for all of them."
    },
    "time_taken": "11.7265s"
  },
  {
    "test": 9,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xb11b2fed6c9354f7aa2f658d3b4d7b31d8a13b77.sol_Proxy.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\n\nThe contract you provided is safe from reentrancy attacks. The `transferOwner()` function does not modify any state variables, so it is not possible for an attacker to reenter the function and modify the state of the contract multiple times.\n\nThe `proxy()` function is vulnerable to reentrancy attacks. An attacker can call `proxy()` to call another contract, and then call `proxy()` again before the first call has returned. This will allow the attacker to call the other contract multiple times in the same transaction, even if they do not have enough funds to pay for all of the calls.\n\nHowever, the `proxy()` function is not vulnerable to reentrancy attacks if it is only called by the `transferOwner()` function. This is because the `transferOwner()` function checks that the sender is the current owner of the contract before transferring ownership. Therefore, the attacker would need to be the current owner of the contract in order to reenter the `proxy()` function.\n\nTo make the `proxy()` function more secure, it could be modified to require that the sender have enough funds to pay for the call before making it. This can be done by checking the sender's balance before calling the other contract.\n\nHere is an example of how to fix the vulnerability in the `proxy()` function:\n\n```solidity\nfunction proxy(address target, bytes calldata data) public payable {\n  // Check that the sender has enough funds to pay for the call.\n  require(msg.sender.balance >= msg.value);\n\n  // Call the target contract.\n  target.call(data).value(msg.value).gas(msg.gas);\n}\n```\n\nWith this fix in place, the `proxy()` function will be safe from reentrancy attacks, even if it is called by anyone, not just the owner of the contract."
    },
    "time_taken": "8.4372s"
  },
  {
    "test": 10,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_parity_wallet_bug_2.sol_WalletLibrary.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[3]]]\\n55\\n[[\"di\",70],[\"af.httprm\",70,\"4660511427637002700\",29]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.2074s"
  },
  {
    "test": 11,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x39cfd754c85023648bf003bea2dd498c5612abfa.sol_TokenBank.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe `WitdrawTokenToHolder()` function is vulnerable to reentrancy attacks. An attacker can call `WitdrawTokenToHolder()` to withdraw tokens from a holder, and then call `WitdrawTokenToHolder()` again before the first call has returned. This will allow the attacker to withdraw more tokens than the holder actually has.\n\nTo fix this vulnerability, the `WitdrawTokenToHolder()` function should be modified to check the holder's balance before withdrawing any tokens. This can be done by calling the `Holders()` function before calling `_fallback[varg0] = 0;`.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction WitdrawTokenToHolder(address varg0, address varg1, uint256 varg2) public nonPayable {\n  // Check the holder's balance.\n  uint256 balance = Holders(varg0);\n  if (balance > 0) {\n    // Withdraw the tokens from the holder.\n    _fallback[varg0] = 0;\n\n    // Transfer the tokens to the recipient.\n    if (_changeOwner == msg.sender) {\n      v0 = varg1.transfer(varg0, varg2).gas(msg.gas);\n    }\n  }\n}\n```\n\nWith this fix in place, the `WitdrawTokenToHolder()` function will be safe from reentrancy attacks."
    },
    "time_taken": "8.4840s"
  },
  {
    "test": 12,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x0cbe050f75bc8f8c2d6c0d249fea125fd6e1acc9.sol_Caller.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe `callAddress()` function is vulnerable to reentrancy attacks. An attacker can call `callAddress()` to call another contract, and then call `callAddress()` again before the first call has returned. This will allow the attacker to call the other contract multiple times in the same transaction, even if they do not have enough funds to pay for all of the calls.\n\nTo fix this vulnerability, the `callAddress()` function should be modified to require that the sender have enough funds to pay for the call before making it. This can be done by checking the sender's balance before calling the other contract.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction callAddress(address target) public nonPayable {\n  // Check that the sender has enough funds to pay for the call.\n  require(msg.sender.balance >= msg.gas * tx.gasprice);\n\n  // Call the target contract.\n  target.call().gas(msg.gas);\n}\n```\n\nWith this fix in place, the `callAddress()` function will be safe from reentrancy attacks."
    },
    "time_taken": "6.3691s"
  },
  {
    "test": 13,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xb7c5c5aa4d42967efe906e1b66cb8df9cebf04f7.sol_keepMyEther.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe `withdraw()` function is vulnerable to reentrancy attacks. An attacker can call `withdraw()` to withdraw funds from their account, and then call `withdraw()` again before the first call has returned. This will allow the attacker to withdraw more funds than they actually have in their account.\n\nTo fix this vulnerability, the `withdraw()` function should be modified to check the sender's balance before withdrawing any funds. This can be done by calling the `balances()` function before calling `msg.sender.call()`.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction withdraw() public nonPayable {\n  // Check the sender's balance.\n  uint256 balance = balances(msg.sender);\n  if (balance > 0) {\n    // Withdraw the funds from the sender's account.\n    v0 = msg.sender.call().value(balance).gas(msg.gas);\n\n    // Set the sender's balance to zero.\n    _fallback[msg.sender] = 0;\n  }\n}\n```\n\nWith this fix in place, the `withdraw()` function will be safe from reentrancy attacks."
    },
    "time_taken": "6.4190s"
  },
  {
    "test": 14,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xf70d589d76eebdd7c12cc5eec99f8f6fa4233b9e.sol_WhaleGiveaway2.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe `GetFreebie()` function is vulnerable to reentrancy attacks. An attacker can call `GetFreebie()` to send funds to themselves and the contract owner, and then call `GetFreebie()` again before the first call has returned. This will allow the attacker to send more funds to themselves than they actually sent to the contract.\n\nTo fix this vulnerability, the `GetFreebie()` function should be modified to check the contract's balance before sending any funds. This can be done by calling `(address(this)).balance` before calling `_owner.call()` and `msg.sender.call()`.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction GetFreebie() public payable {\n  // Check the contract's balance.\n  uint256 balance = (address(this)).balance;\n  if (msg.value > 0xde0b6b3a7640000 && balance > 0) {\n    // Send funds to the contract owner.\n    v0 = _owner.call().value(balance / 2).gas(!(address(this)).balance * 2300);\n    require(bool(v0), 0, RETURNDATASIZE()); // checks call status, propagates error data on error\n\n    // Send funds to the caller.\n    v1 = msg.sender.call().value(balance / 2).gas(!(address(this)).balance * 2300);\n    require(bool(v1), 0, RETURNDATASIZE()); // checks call status, propagates error data on error\n  }\n}\n```\n\nWith this fix in place, the `GetFreebie()` function will be safe from reentrancy attacks.\n\n**Note:** The `withdraw()` function is also vulnerable to reentrancy attacks, but it can be fixed in the same way as the `GetFreebie()` function."
    },
    "time_taken": "9.2607s"
  },
  {
    "test": 15,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x561eac93c92360949ab1f1403323e6db345cbf31.sol_BANK_SAFE.json.sol",
    "analysis": {
      "error": "Failed to analyze: HTTPSConnectionPool(host='bard.google.com', port=443): Read timed out. (read timeout=20)"
    },
    "time_taken": "20.0095s"
  },
  {
    "test": 16,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_front_running_ERC20.sol_ERC20.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe `transferFrom()` function is vulnerable to reentrancy attacks. An attacker can call `transferFrom()` to transfer funds from a victim's account to their own account, and then call `transferFrom()` again before the first call has returned. This will allow the attacker to transfer more funds from the victim's account than they actually have approved.\n\nTo fix this vulnerability, the `transferFrom()` function should be modified to check the victim's balance before transferring any funds. This can be done by calling `balanceOf(varg0)` before calling `_balanceOf[varg0] = _balanceOf[varg0] - varg2;`.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable {\n  // Check the victim's balance.\n  uint256 victimBalance = balanceOf(varg0);\n\n  // Require that the victim has enough funds to transfer.\n  require(varg2 <= victimBalance);\n\n  // Require that the victim has approved the transfer.\n  require(varg2 <= _allowance[varg0][msg.sender]);\n\n  // Transfer the funds from the victim's account to the recipient's account.\n  _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n  _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n\n  // Update the victim's allowance.\n  _allowance[varg0][msg.sender] = _allowance[varg0][msg.sender] - varg2;\n\n  // Emit a transfer event.\n  emit Transfer(varg0, varg1, varg2);\n\n  return true;\n}\n```\n\nWith this fix in place, the `transferFrom()` function will be safe from reentrancy attacks."
    },
    "time_taken": "8.7387s"
  },
  {
    "test": 17,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_short_addresses_short_address_example.sol_MyToken.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe `sendCoin()` function is vulnerable to reentrancy attacks. An attacker can call `sendCoin()` to transfer funds from their account to their own account, and then call `sendCoin()` again before the first call has returned. This will allow the attacker to transfer more funds from their account than they actually have.\n\nTo fix this vulnerability, the `sendCoin()` function should be modified to check the sender's balance before transferring any funds. This can be done by calling `_getBalance[msg.sender]` before calling `_getBalance[msg.sender] = _getBalance[msg.sender] - varg1;`.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction sendCoin(address varg0, uint256 varg1) public nonPayable {\n  // Check the sender's balance.\n  uint256 senderBalance = _getBalance[msg.sender];\n\n  // Require that the sender has enough funds to transfer.\n  require(varg1 <= senderBalance);\n\n  // Transfer the funds from the sender's account to the recipient's account.\n  _getBalance[msg.sender] = _getBalance[msg.sender] - varg1;\n  _getBalance[varg0] = _getBalance[varg0] + varg1;\n\n  // Emit a transfer event.\n  emit Transfer(msg.sender, varg0, varg1);\n\n  return true;\n}\n```\n\nWith this fix in place, the `sendCoin()` function will be safe from reentrancy attacks."
    },
    "time_taken": "7.9184s"
  },
  {
    "test": 18,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol_PrivateBank.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe `CashOut()` function is vulnerable to reentrancy attacks. An attacker can call `CashOut()` to withdraw funds from their account, and then call `CashOut()` again before the first call has returned. This will allow the attacker to withdraw more funds from their account than they actually have.\n\nTo fix this vulnerability, the `CashOut()` function should be modified to check the sender's balance before withdrawing any funds. This can be done by calling `_balances[msg.sender]` before calling `v0 = msg.sender.call().value(varg0).gas(msg.gas);`.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction CashOut(uint256 varg0) public nonPayable {\n  // Check the sender's balance.\n  uint256 senderBalance = _balances[msg.sender];\n\n  // Require that the sender has enough funds to withdraw.\n  require(varg0 <= senderBalance);\n\n  // Withdraw the funds from the sender's account.\n  v0 = msg.sender.call().value(varg0).gas(msg.gas);\n\n  // If the withdrawal was successful, update the sender's balance.\n  if (v0) {\n    _balances[msg.sender] = _balances[msg.sender] - varg0;\n  }\n\n  // Update the contract's state log.\n  require(bool(stor_2_0_19.code.size));\n  v1 = stor_2_0_19.AddMessage(msg.sender, varg0, 'CashOut').gas(msg.gas);\n  require(bool(v1), 0, RETURNDATASIZE()); // checks call status, propagates error data on error\n}\n```\n\nWith this fix in place, the `CashOut()` function will be safe from reentrancy attacks."
    },
    "time_taken": "8.8686s"
  },
  {
    "test": 19,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_integer_overflow_multitx_onefunc_feasible.sol_IntegerOverflowMultiTxOneFuncFeasible.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe `run()` function is vulnerable to reentrancy attacks. An attacker can call `run()` to decrement the counter, and then call `run()` again before the first call has returned. This will allow the attacker to decrement the counter more times than they actually have the right to.\n\nTo fix this vulnerability, the `run()` function should be modified to check the value of the `_run` variable before decrementing the counter. This can be done by calling `_run` before calling `_count = _count - varg0;`.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction run(uint256 varg0) public nonPayable {\n  // Check the value of the _run variable.\n  uint256 run = _run;\n\n  // Require that the _run variable is equal to 1.\n  require(run == 1);\n\n  // Decrement the counter.\n  _count = _count - varg0;\n\n  // Set the _run variable back to 0.\n  _run = 0;\n}\n```\n\nWith this fix in place, the `run()` function will be safe from reentrancy attacks."
    },
    "time_taken": "7.3332s"
  },
  {
    "test": 20,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_bad_randomness_guess_the_random_number.sol_GuessTheRandomNumberChallenge.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe `guess()` function is vulnerable to reentrancy attacks. An attacker can call `guess()` to send ether to the contract and check the guess, and then call `guess()` again before the first call has returned. This will allow the attacker to check the guess multiple times, even if their guess is wrong.\n\nTo fix this vulnerability, the `guess()` function should be modified to check the guess before sending any ether. This can be done by calling `_guess` before calling `v0 = msg.sender.call().value(0x1bc16d674ec80000);`.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction guess(uint8 varg0) public payable {\n  require(bool(msg.value == 0xde0b6b3a7640000));\n\n  // Check the guess.\n  if (varg0 == _guess) {\n    // Send ether to the caller.\n    v0 = msg.sender.call().value(0x1bc16d674ec80000);\n    require(bool(v0), 0, RETURNDATASIZE()); // checks call status, propagates error data on error\n  }\n}\n```\n\nWith this fix in place, the `guess()` function will be safe from reentrancy attacks."
    },
    "time_taken": "12.1360s"
  },
  {
    "test": 21,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol_Log.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\n\n**Category:** NO"
    },
    "time_taken": "10.6444s"
  },
  {
    "test": 22,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_bad_randomness_etheraffle.sol_Ethraffle_v4b.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\n\n**Category:** NO"
    },
    "time_taken": "6.0576s"
  },
  {
    "test": 23,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol_EBU.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\n\n**Category:** NO"
    },
    "time_taken": "8.6043s"
  },
  {
    "test": 24,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_denial_of_service_dos_number.sol_DosNumber.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe function `0x529f6f2d()` is vulnerable to reentrancy. This function allows an attacker to call itself multiple times within the same transaction, which can drain the contract's funds.\n\nTo exploit this vulnerability, an attacker would first call the `0x529f6f2d()` function with a large value for `varg1`. This will cause the `_clear` variable to be incremented many times. The attacker can then call the function again, this time with a small value for `varg1`. This will cause the `_clear` variable to be incremented again, but it will not be large enough to reach the end of the `array_1` array. The attacker can then repeat this process until the contract's funds are drained.\n\nTo fix this vulnerability, the `0x529f6f2d()` function should be modified to check the value of `_clear` before incrementing it. If `_clear` is already equal to the length of the `array_1` array, then the function should revert."
    },
    "time_taken": "6.4737s"
  },
  {
    "test": 25,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x19cf8481ea15427a98ba3cdd6d9e14690011ab10.sol_StandardToken.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE"
    },
    "time_taken": "5.4339s"
  },
  {
    "test": 26,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol_Private_Bank.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe function `CashOut()` is vulnerable to reentrancy. This function allows an attacker to call itself multiple times within the same transaction, which can drain the contract's funds.\n\nTo exploit this vulnerability, an attacker would first call the `CashOut()` function with a large value for `varg0`. This will cause the `_balances[msg.sender]` variable to be decremented by `varg0`. The attacker can then call the function again, this time with a small value for `varg0`. This will cause the `_balances[msg.sender]` variable to be decremented again, but it will not be large enough to reach zero. The attacker can then repeat this process until the contract's funds are drained.\n\nTo fix this vulnerability, the `CashOut()` function should be modified to check the balance of the sender before decrementing it. If the sender's balance is less than `varg0`, then the function should revert.\n\nIn addition to the reentrancy vulnerability, the `Deposit()` function also has a potential overflow vulnerability. If the value of `msg.value` is greater than the maximum value of a uint256, then the `_balances[msg.sender]` variable will overflow, which can lead to unexpected behavior.\n\nTo fix this vulnerability, the `Deposit()` function should be modified to check the value of `msg.value` before adding it to `_balances[msg.sender]`. If the value of `msg.value` is greater than the maximum value of a uint256, then the function should revert."
    },
    "time_taken": "7.0363s"
  },
  {
    "test": 27,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol_SafeMath.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\n\n**Category:** NO"
    },
    "time_taken": "5.5929s"
  },
  {
    "test": 28,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_etherstore.sol_EtherStore.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\n\n**Category:** NO\n\nThe smart contract you provided contains the following functions:\n\n* `withdrawalLimit()`: Returns the maximum amount of funds that can be withdrawn in a single transaction.\n* `depositFunds()`: Deposits funds into the contract.\n* `lastWithdrawTime(address varg0)`: Returns the last time that the address `varg0` withdrew funds from the contract.\n* `withdrawFunds(uint256 varg0)`: Withdraws the specified amount of funds from the contract.\n* `balances(address varg0)`: Returns the balance of the address `varg0`.\n\nI analyzed the smart contract for vulnerabilities and found none. The contract uses the following security measures:\n\n* It checks that the withdrawal amount is greater than zero and less than or equal to the withdrawal limit.\n* It checks that the sender has enough funds in their balance before withdrawing.\n* It checks that the sender has not withdrawn funds recently (within 24 hours).\n\nOverall, the smart contract is well-written and secure."
    },
    "time_taken": "7.0024s"
  },
  {
    "test": 29,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_simple_suicide.sol_SimpleSuicide.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Denial of service\n\nThe function `0xa56a3b5a()` is vulnerable to denial of service (DoS) attacks. This function allows anyone to selfdestruct the contract, which would destroy all of the contract's funds and state.\n\nTo exploit this vulnerability, an attacker would simply call the `0xa56a3b5a()` function. This would cause the contract to be selfdestructed, and the attacker would be able to steal all of the contract's funds.\n\nTo fix this vulnerability, the `0xa56a3b5a()` function should be removed from the contract.\n\nIn addition to the DoS vulnerability, the contract is also vulnerable to reentrancy attacks. This is because the contract does not check that the sender has enough funds in their balance before withdrawing.\n\nTo fix this vulnerability, the contract should be modified to check that the sender has enough funds in their balance before withdrawing.\n\nOverall, the contract is poorly written and insecure. It should be avoided."
    },
    "time_taken": "7.3460s"
  },
  {
    "test": 30,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xd5967fed03e85d1cce44cab284695b41bc675b5c.sol_demo.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe function `transfer()` is vulnerable to reentrancy attacks. This function allows an attacker to call the function multiple times within the same transaction, which can drain the contract's funds.\n\nTo exploit this vulnerability, an attacker would first call the `transfer()` function with a large value for `varg3`. This will cause the `transferFrom()` function to be called multiple times, and the attacker will be able to steal all of the contract's funds.\n\nTo fix this vulnerability, the `transfer()` function should be modified to check that the `transferFrom()` function was successful before returning.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction transfer(address varg0, address varg1, address[] varg2, uint256 varg3) public nonPayable {\n    v0 = new uint256[](varg2.length);\n    CALLDATACOPY(v0.data, varg2.data, varg2.length << 5);\n    require(bool(v0.length > 0));\n\n    // Check that the transferFrom call was successful before returning.\n    bool success = true;\n    for (uint256 i = 0; i < v0.length; i++) {\n        success = success && varg1.transferFrom(varg0, address(v0[i]), varg3);\n    }\n\n    require(success);\n    return bool(1);\n}\n```\n\nIn addition to the reentrancy vulnerability, the `transfer()` function is also vulnerable to unchecked low-level calls. This is because the function does not check the return value of the `transferFrom()` function.\n\nTo fix this vulnerability, the `transfer()` function should be modified to check the return value of the `transferFrom()` function.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction transfer(address varg0, address varg1, address[] varg2, uint256 varg3) public nonPayable {\n    v0 = new uint256[](varg2.length);\n    CALLDATACOPY(v0.data, varg2.data, varg2.length << 5);\n    require(bool(v0.length > 0));\n\n    // Check that the transferFrom call was successful.\n    for (uint256 i = 0; i < v0.length; i++) {\n        require(varg1.transferFrom(varg0, address(v0[i]), varg3));\n    }\n\n    return bool(1);\n}\n```\n\nOverall, the `transfer()` function is poorly written and insecure. It should be avoided."
    },
    "time_taken": "9.6722s"
  },
  {
    "test": 31,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Ownable.json.sol",
    "analysis": {
      "error": "Failed to analyze: HTTPSConnectionPool(host='bard.google.com', port=443): Read timed out. (read timeout=20)"
    },
    "time_taken": "20.0107s"
  },
  {
    "test": 32,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xec329ffc97d75fe03428ae155fc7793431487f63.sol_Owned.json.sol",
    "analysis": {
      "error": "Failed to analyze: HTTPSConnectionPool(host='bard.google.com', port=443): Read timed out. (read timeout=20)"
    },
    "time_taken": "20.0515s"
  },
  {
    "test": 33,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_other_name_registrar.sol_NameRegistrar.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Category:** Reentrancy\n\nThe function `register()` is vulnerable to reentrancy attacks. This function allows an attacker to call the function multiple times within the same transaction, which can drain the contract's funds.\n\nTo exploit this vulnerability, an attacker would first call the `register()` function with a large value for `varg0`. This will cause the `_resolve[uint256(varg0)]` variable to be incremented multiple times. The attacker can then call the function again, this time with a small value for `varg0`. This will cause the `_resolve[uint256(varg0)]` variable to be decremented, but it will not be large enough to reach zero. The attacker can then repeat this process until the contract's funds are drained.\n\nTo fix this vulnerability, the `register()` function should be modified to check the balance of the sender before decrementing it. If the sender's balance is less than `varg0`, then the function should revert.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction register(bytes32 varg0, address varg1) public nonPayable {\n    _unlocked = uint256(varg0);\n    owner_1 = varg1 | bytes12(owner_1);\n    _resolve[uint256(varg0)] = varg1 | bytes12(_resolve[uint256(uint256(uint256(varg0)))]);\n    owner_1[msg.sender].field0 = uint256(_unlocked);\n    owner_1[msg.sender].field1 = address(owner_1) | bytes12(owner_1[address(address(msg.sender))].field1);\n    require(bool(uint8(_unlocked)));\n\n    // Check the balance of the sender before decrementing it.\n    require(address(owner_1[address(msg.sender)]).balance >= varg0);\n\n    // Decrement the balance of the sender.\n    address(owner_1[address(msg.sender)]).balance -= varg0;\n}\n```\n\nIn addition to the reentrancy vulnerability, the `register()` function is also vulnerable to unchecked low-level calls. This is because the function does not check the return value of the `address(owner_1[address(msg.sender)]).balance` call.\n\nTo fix this vulnerability, the `register()` function should be modified to check the return value of the `address(owner_1[address(msg.sender)]).balance` call.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction register(bytes32 varg0, address varg1) public nonPayable {\n    _unlocked = uint256(varg0);\n    owner_1 = varg1 | bytes12(owner_1);\n    _resolve[uint256(varg0)] = varg1 | bytes12(_resolve[uint256(uint256(uint256(varg0)))]);\n    owner_1[msg.sender].field0 = uint256(_unlocked);\n    owner_1[msg.sender].field1 = address(owner_1) | bytes12(owner_1[address(address(msg.sender))].field1);\n    require(bool(uint8(_unlocked)));\n\n    // Check the return value of the balance call.\n    uint256 balance = address(owner_1[address(msg.sender)]).balance;\n    require(balance >= varg0);\n\n    // Decrement the balance of the sender.\n    address(owner_1[address(msg.sender)]).balance -= varg0;\n}\n```\n\nOverall, the `register()` function is poorly written and insecure. It should be avoided."
    },
    "time_taken": "16.3538s"
  },
  {
    "test": 34,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_multiowned_vulnerable.sol_MultiOwnable.json.sol",
    "analysis": {
      "raw_response": "SAFE"
    },
    "time_taken": "5.3384s"
  },
  {
    "test": 35,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol_DEP_BANK.json.sol",
    "analysis": {
      "raw_response": "First, you'll need to connect Google Workspace to turn on this extension."
    },
    "time_taken": "27.9563s"
  },
  {
    "test": 36,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xec329ffc97d75fe03428ae155fc7793431487f63.sol_TokenSender.json.sol",
    "analysis": {
      "raw_response": "**Rating: VULNERABLE**\n**Category: reentrancy**\n\nThis smart contract is vulnerable to reentrancy attacks. The `fill()` function allows the caller to add new transfers to the contract, and then execute them all in the `run()` function. However, the `run()` function does not check if the caller has already withdrawn their funds, so an attacker can reenter the `fill()` function to add more transfers to the contract, and then withdraw their funds before the `run()` function executes all of the transfers. This can allow the attacker to steal funds from the contract.\n\nTo fix this vulnerability, the `run()` function should check if the caller has already withdrawn their funds before executing any of the transfers."
    },
    "time_taken": "8.7971s"
  },
  {
    "test": 37,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_unchecked_return_value.sol_ReturnValue.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "20.7971s"
  },
  {
    "test": 38,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_reentrancy_dao.sol_ReentrancyDAO.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\r\n\r\n**Category:** Reentrancy\r\n\r\nThe `withdrawAll()` function in this contract is vulnerable to reentrancy attacks. This is because the contract updates the user's balance **after** calling the `msg.sender.call()` function. This means that an attacker could recursively call the `withdrawAll()` function before the balance update has occurred, allowing them to withdraw more funds than they are entitled to.\r\n\r\nTo fix this vulnerability, the contract should update the user's balance **before** calling the `msg.sender.call()` function. This would prevent the attacker from being able to recursively call the `withdrawAll()` function and withdraw more funds than they are entitled to."
    },
    "time_taken": "6.7323s"
  },
  {
    "test": 39,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol_Log.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** unchecked_low_level_calls\n\nThe contract contains a function called `AddMessage()` which takes a `bytes` array as a parameter. This function then uses the `CALLDATACOPY()` opcode to copy the contents of the `bytes` array to a new memory location. However, the function does not check the length of the `bytes` array before copying it to memory. This means that an attacker could pass a large `bytes` array to the `AddMessage()` function, causing the contract to run out of gas or even crash.\n\nTo mitigate this vulnerability, the contract should check the length of the `bytes` array before copying it to memory. If the `bytes` array is too large, the function should revert."
    },
    "time_taken": "11.4993s"
  },
  {
    "test": 40,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_spank_chain_payment.sol_StandardToken.json.sol",
    "analysis": {
      "raw_response": "Rating: **VULNERABLE**\n\nCategory: **Reentrancy**"
    },
    "time_taken": "10.4584s"
  },
  {
    "test": 41,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x39cfd754c85023648bf003bea2dd498c5612abfa.sol_Ownable.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** Reentrancy"
    },
    "time_taken": "5.0735s"
  },
  {
    "test": 42,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_mapping_write.sol_Map.json.sol",
    "analysis": {
      "raw_response": "**Rating: VULNERABLE**\n**Category: REENTRANCY**"
    },
    "time_taken": "6.0476s"
  },
  {
    "test": 43,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x7d09edb07d23acb532a82be3da5c17d9d85806b4.sol_PoCGame.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\r\n**Vulnerability category:** reentrancy"
    },
    "time_taken": "11.1165s"
  },
  {
    "test": 44,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_incorrect_constructor_name3.sol_Missing.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\r\n**Category:** Reentrancy\r\n\r\nThe withdraw function in the given smart contract is vulnerable to a reentrancy attack. The `call()` function allows the caller to execute arbitrary code, which could include a reentrancy attack. The `require(bool(v0), 0, RETURNDATASIZE())` statement does not prevent a reentrancy attack, as it only checks the status of the call, not the state of the contract after the call.\n\nTo fix this vulnerability, the withdraw function should be updated to check the state of the contract after the `call()` function. For example, the function could check the balance of the contract to ensure that it is greater than or equal to the amount being withdrawn.\n\nHere is an example of a fixed withdraw function:\n\n```solidity\nfunction withdraw() public nonPayable {\n    require(bool(address(msg.sender) == _constructor));\n\n    uint256 balance = address(this).balance;\n    require(balance >= amount, \"Insufficient balance\");\n\n    v0 = _constructor.call().value(amount).gas(!(address(this)).balance * 2300);\n    require(bool(v0), 0, RETURNDATASIZE());\n\n    require(address(this).balance == balance - amount, \"Withdraw failed\");\n}\n```"
    },
    "time_taken": "12.6494s"
  },
  {
    "test": 45,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x7541b76cb60f4c60af330c208b0623b7f54bf615.sol_U_BANK.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\r\n**Category:** REENTRANCY"
    },
    "time_taken": "8.1813s"
  },
  {
    "test": 46,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x19cf8481ea15427a98ba3cdd6d9e14690011ab10.sol_SafeMath.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** unchecked_low_level_calls\n\nThe `__function_selector__()` function does not check the return value of the `revert()` call. This means that if the `revert()` call fails, the function will continue executing and may potentially lead to unexpected behavior."
    },
    "time_taken": "10.6583s"
  },
  {
    "test": 47,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_bad_randomness_lottery.sol_Lottery.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n\n**Vulnerability Category:** Reentrancy\n\nThis smart contract is vulnerable to reentrancy. The `makeBet()` function can be called multiple times before the `require(bool(v0));` statement is executed, allowing the attacker to withdraw all of the funds from the contract.\n\nTo fix this vulnerability, the `require(bool(v0));` statement should be moved to the beginning of the `makeBet()` function. This will prevent the attacker from withdrawing any funds before the function has completed.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction makeBet() public nonPayable {\n    require(bool(v0));\n\n    assert(bool(2));\n    MEM[64] = MEM[64] + 96;\n    _makeBet = _makeBet.length + 1;\n    _makeBet[_makeBet.length + 1 - 1].field0 = msg.value;\n    _makeBet[_makeBet.length + 1 - 1].field1 = block.number;\n    _makeBet[_makeBet.length + 1 - 1].field2 = bool(block.number % 2 == 0) | bytes31(_makeBet[_makeBet.length + 1 - 1].field2);\n\n    if (block.number % 2 == 0) {\n        v0 = msg.sender.call().value(msg.value).gas(!msg.value * 2300);\n    }\n}\n```"
    },
    "time_taken": "8.8017s"
  },
  {
    "test": 48,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xdb1c55f6926e7d847ddf8678905ad871a68199d2.sol_FreeEth.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "20.3818s"
  },
  {
    "test": 49,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol_Log.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** integer_overflow"
    },
    "time_taken": "9.9901s"
  },
  {
    "test": 50,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xbaf51e761510c1a11bf48dd87c0307ac8a8c8a4f.sol_ETH_VAULT.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** Reentrancy\n\nThe CashOut function is vulnerable to reentrancy attacks. The function checks if the user's balance is greater than the amount being withdrawn, but it does not check the balance again after the withdrawal is made. This means that an attacker can call the CashOut function multiple times before the first call has completed, effectively draining the user's account.\n\nTo fix this vulnerability, the CashOut function should check the user's balance again after the withdrawal is made. If the balance is less than the amount being withdrawn, the function should revert the transaction."
    },
    "time_taken": "7.2804s"
  },
  {
    "test": 51,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_simple_dao.sol_SimpleDAO.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** Reentrancy"
    },
    "time_taken": "7.5077s"
  },
  {
    "test": 52,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x7a4349a749e59a5736efb7826ee3496a2dfd5489.sol_WhaleGiveaway1.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\r\n**Category:** Reentrancy"
    },
    "time_taken": "7.7384s"
  },
  {
    "test": 53,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_bad_randomness_blackjack.sol_BlackJack.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[3]]]\\n55\\n[[\"di\",79],[\"af.httprm\",79,\"8679849849456792904\",16]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7126s"
  },
  {
    "test": 54,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_PandaAuction.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[3]]]\\n56\\n[[\"di\",107],[\"af.httprm\",106,\"7430849960336014357\",6]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.5482s"
  },
  {
    "test": 55,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_insecure_transfer.sol_IntegerOverflowAdd.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\r\n**Category:** Other"
    },
    "time_taken": "7.0696s"
  },
  {
    "test": 56,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_lotto.sol_Lotto.json.sol",
    "analysis": {
      "raw_response": "**Rating: VULNERABLE**\n**Category: reentrancy**"
    },
    "time_taken": "5.9734s"
  },
  {
    "test": 57,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol_Log.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "20.3129s"
  },
  {
    "test": 58,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_modifier_reentrancy.sol_ModifierEntrancy.json.sol",
    "analysis": {
      "raw_response": "Rating: VULNERABLE\r\nCategory: unchecked_low_level_calls"
    },
    "time_taken": "6.2105s"
  },
  {
    "test": 59,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_SaleClockAuction.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[3]]]\\n54\\n[[\"di\",73],[\"af.httprm\",73,\"2816940256370316969\",6]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.4852s"
  },
  {
    "test": 60,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_reentrancy_simple.sol_Reentrance.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** Reentrancy"
    },
    "time_taken": "11.8946s"
  },
  {
    "test": 61,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_mishandled.sol_SendBack.json.sol",
    "analysis": {
      "raw_response": "**VULNERABLE, Reentrancy**"
    },
    "time_taken": "11.4346s"
  },
  {
    "test": 62,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_PandaCore.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[3]]]\\n55\\n[[\"di\",91],[\"af.httprm\",90,\"-8184637684514368112\",6]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7606s"
  },
  {
    "test": 63,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xbebbfe5b549f5db6e6c78ca97cac19d1fb03082c.sol_Proxy.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\r\n**Category:** access_control\r\n\r\nThe `transferOwner` function is vulnerable to an access control attack. Anyone can call the `transferOwner` function to transfer ownership of the contract to themselves. This is because the `transferOwner` function does not require the caller to be the current owner of the contract."
    },
    "time_taken": "8.0750s"
  },
  {
    "test": 64,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_FibonacciBalance.sol_FibonacciLib.json.sol",
    "analysis": {
      "raw_response": "**Rating: VULNERABLE**\n\n**Category: reentrancy**\n\nThe `13f()` function is vulnerable to reentrancy. This is because the function does not check if the caller has already withdrawn funds before making the recursive call. An attacker can exploit this vulnerability by repeatedly calling the `13f()` function until all of the funds in the contract have been withdrawn.\n\n**Recommendation:**\n\nTo fix this vulnerability, the `13f()` function should check if the caller has already withdrawn funds before making the recursive call. This can be done by adding a check to the beginning of the function to see if the caller's balance is greater than zero. If the caller's balance is zero, then the function should revert.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction 13f(uint256 varg0) private {\n    if (msg.sender.balance > 0) {\n        if (varg0 != 0) {\n            if (varg0 != 1) {\n                v0 = 0x13f(varg0 - 2);\n                v1 = 0x13f(varg0 - 1);\n                v2 = v1 + v0;\n            } else {\n                v2 = v3 = _setStart + 1;\n            }\n        } else {\n            v2 = v4 = _setStart;\n        }\n    } else {\n        revert();\n    }\n    return v2;\n}\n```"
    },
    "time_taken": "7.8989s"
  },
  {
    "test": 65,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_PandaBase.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.1238s"
  },
  {
    "test": 66,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xb0510d68f210b7db66e8c7c814f22680f2b8d1d6.sol_Splitter.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** reentrancy"
    },
    "time_taken": "9.3521s"
  },
  {
    "test": 67,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xbaa3de6504690efb064420d89e871c27065cdd52.sol_VaultProxy.json.sol",
    "analysis": {
      "raw_response": "**SAFE**"
    },
    "time_taken": "4.9014s"
  },
  {
    "test": 68,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_ClockAuctionBase.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\r\n**Vulnerability category:** None"
    },
    "time_taken": "5.8737s"
  },
  {
    "test": 69,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xaae1f51cf3339f18b6d3f3bdc75a5facd744b0b8.sol_LogFile.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** unchecked_low_level_calls\n\nThe contract uses the CALLDATACOPY function without checking the length of the input data. This can lead to a buffer overflow attack, where an attacker can overwrite arbitrary memory in the contract, including the storage of other contracts."
    },
    "time_taken": "15.7308s"
  },
  {
    "test": 70,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xb620cee6b52f96f3c6b253e6eea556aa2d214a99.sol_DrainMe.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** access_control"
    },
    "time_taken": "8.8071s"
  },
  {
    "test": 71,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_other_crypto_roulette.sol_CryptoRoulette.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\r\n**Category:** reentrancy"
    },
    "time_taken": "6.4041s"
  },
  {
    "test": 72,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol_LogFile.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** unchecked_low_level_calls\n\nThis smart contract is vulnerable to unchecked low-level calls because it uses the CALLDATACOPY instruction without checking the length of the input data. This could allow an attacker to inject malicious code into the contract and execute it.\n\nFor example, an attacker could create a message with a very large length and then call the AddMessage function. This would cause the CALLDATACOPY instruction to copy more data than the array can hold, overwriting other memory locations in the contract. The attacker could then inject malicious code into these memory locations and execute it when the function returns.\n\nTo mitigate this vulnerability, the contract should check the length of the input data before calling the CALLDATACOPY instruction. If the length is greater than the size of the array, the function should revert."
    },
    "time_taken": "6.3309s"
  },
  {
    "test": 73,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol_PENNY_BY_PENNY.json.sol",
    "analysis": {
      "raw_response": "First, you'll need to connect Google Workspace to turn on this extension."
    },
    "time_taken": "6.0274s"
  },
  {
    "test": 74,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x610495793564aed0f9c7fc48dc4c7c9151d34fd6.sol_SimpleWallet.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** Reentrancy"
    },
    "time_taken": "14.5221s"
  },
  {
    "test": 75,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x941d225236464a25eb18076df7da6a91d0f95e9e.sol_ETH_FUND.json.sol",
    "analysis": {
      "raw_response": "**Rating: VULNERABLE**\n\n**Category: Reentrancy**\n\nThis smart contract is vulnerable to reentrancy attacks. The `CashOut` function does not check if the caller has enough balance before calling the `stor_2_0_19.AddMessage` function. This can allow an attacker to call the `CashOut` function multiple times before the `stor_2_0_19.AddMessage` function returns, effectively withdrawing more funds than they have deposited.\n\nTo fix this vulnerability, the `CashOut` function should check if the caller has enough balance before calling the `stor_2_0_19.AddMessage` function. The function should also check the return value of the `stor_2_0_19.AddMessage` function and revert the transaction if the call was unsuccessful."
    },
    "time_taken": "6.7302s"
  },
  {
    "test": 76,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_SiringClockAuction.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[3]]]\\n55\\n[[\"di\",77],[\"af.httprm\",77,\"-1196116674551564341\",6]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.5153s"
  },
  {
    "test": 77,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xe4eabdca81e31d9acbc4af76b30f532b6ed7f3bf.sol_Honey.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\r\n**Category:** unchecked_low_level_calls"
    },
    "time_taken": "15.7174s"
  },
  {
    "test": 78,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xe894d54dca59cb53fe9cbc5155093605c7068220.sol_airDrop.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\r\n**Category:** OTHER"
    },
    "time_taken": "6.8511s"
  },
  {
    "test": 79,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_bad_randomness_smart_billions.sol_SafeMath.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\r\n**Category:** unchecked_low_level_calls\r\n\r\nThe function `__function_selector__()` calls the low-level function `revert()` without checking the return value. This could allow an attacker to steal funds from the contract by calling the function with a malicious payload. For example, the attacker could call the function with a payload that causes the contract to send all of its funds to the attacker's address."
    },
    "time_taken": "10.4467s"
  },
  {
    "test": 80,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_bad_randomness_smart_billions.sol_SmartBillions.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[3]]]\\n54\\n[[\"di\",60],[\"af.httprm\",59,\"4120676868682592573\",6]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7001s"
  },
  {
    "test": 81,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_BECToken.sol_SafeMath.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** Reentrancy\n\nThe function `__function_selector__()` is vulnerable to reentrancy. This is because the function reverts at the end, which means that an attacker can call the function multiple times before the revert is executed, effectively draining the contract's balance.\n\nTo fix this vulnerability, the function should be modified to check whether the contract has already been called during the same transaction. If it has, the function should revert immediately. This will prevent the attacker from being able to reenter the function and drain the contract's balance.\n\nExample:\n\n```solidity\nfunction __function_selector__() public payable {\n    if (msg.sender == tx.origin) {\n        revert();\n    }\n\n    // ...\n}\n```"
    },
    "time_taken": "10.9091s"
  },
  {
    "test": 82,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_timelock.sol_TimeLock.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\r\n**Category:** Reentrancy\r\n\r\nThe `withdraw()` function is vulnerable to reentrancy attacks. An attacker can call the `withdraw()` function recursively before the state is updated, causing multiple withdrawals.\r\n\r\nTo mitigate this vulnerability, the `withdraw()` function should use a lock to prevent recursive calls. For example, the following code shows how to use a lock to mitigate the reentrancy vulnerability:\r\n\r\n```solidity\r\nfunction withdraw() public nonPayable {\r\n    require(bool(_balances[address(address(msg.sender))] > 0));\r\n    require(bool(block.timestamp > _increaseLockTime[address(address(msg.sender))]));\r\n\r\n    // Acquire a lock to prevent recursive calls.\r\n    uint256 lock = _locks[msg.sender];\r\n    if (lock == 0) {\r\n        _locks[msg.sender] = 1;\r\n    } else {\r\n        require(false, \"Reentrancy attack detected.\");\r\n    }\r\n\r\n    // Withdraw the funds.\r\n    _balances[msg.sender] = 0;\r\n    v0 = msg.sender.call().value(_balances[msg.sender]).gas(!_balances[msg.sender] * 2300);\r\n    require(bool(v0), 0, RETURNDATASIZE()); // checks call status, propagates error data on error\r\n\r\n    // Release the lock.\r\n    _locks[msg.sender] = 0;\r\n}\r\n```"
    },
    "time_taken": "15.3387s"
  },
  {
    "test": 83,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_denial_of_service_auction.sol_DosAuction.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\r\n**Category:** reentrancy"
    },
    "time_taken": "9.0948s"
  },
  {
    "test": 84,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xb5e1b1ee15c6fa0e48fce100125569d430f1bd12.sol_Log.json.sol",
    "analysis": {
      "raw_response": "Rating: VULNERABLE\r\nCategory: unchecked_low_level_calls"
    },
    "time_taken": "8.1057s"
  },
  {
    "test": 85,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_proxy.sol_Proxy.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** unchecked_low_level_calls"
    },
    "time_taken": "5.9092s"
  },
  {
    "test": 86,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_SaleClockAuctionERC20.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[3]]]\\n55\\n[[\"di\",73],[\"af.httprm\",72,\"-6970563478113527562\",7]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.5153s"
  },
  {
    "test": 87,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_time_manipulation_ether_lotto.sol_EtherLotto.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\r\n\r\n**Category:** Other\r\n\r\n\r\n// Decompiled by library.dedaub.com\r\n// 2023.11.08 21:00 UTC\r\n// Compiled using the solidity compiler version 0.4.7<=v<0.5.9\r\n\r\n\r\n// Data structures and variables inferred from the use of storage instructions\r\nuint256 _pot; // STORAGE[0x1]\r\nuint256 _bank; // STORAGE[0x0] bytes 0 to 19\r\n\r\n\r\n\r\n\r\nfunction () public payable { \r\n    revert();\r\n}\r\n\r\nfunction pot() public nonPayable { \r\n    return _pot;\r\n}\r\n\r\nfunction bank() public nonPayable { \r\n    return _bank;\r\n}\r\n\r\nfunction play() public payable { \r\n    assert(bool(msg.value == 10)); // checks if the value sent is 10\r\n    _pot = _pot + msg.value; // adds the sent value to the pot\r\n    assert(bool(2)); // always true\r\n    if (keccak256(block.timestamp) % 2 == 0) { // if the timestamp is even\r\n        v0 = _bank.call().value(1); // calls the bank function with a value of 1\r\n        require(bool(v0), 0, RETURNDATASIZE()); // checks if the call was successful\r\n        v1 = msg.sender.call().value(_pot - 1).gas(!(_pot - 1) * 2300); // calls the sender's function with a value of the pot - 1\r\n        require(bool(v1), 0, RETURNDATASIZE()); // checks if the call was successful\r\n        _pot = 0; // sets the pot to 0\r\n    }\r\n}\r\n\r\n// Note: The function selector is not present in the original solidity code.\r\n// However, we display it for the sake of completeness.\r\n\r\nfunction __function_selector__(bytes4 function_selector) public payable { \r\n    MEM[64] = 128;\r\n    if (msg.data.length >= 4) {\r\n        if (0x4ba2363a == uint32(function_selector >> 224)) {\r\n            pot();\r\n        } else if (0x76cdb03b == uint32(function_selector >> 224)) {\r\n            bank();\r\n        } else if (0x93e84cd9 == uint32(function_selector >> 224)) {\r\n            play();\r\n        }\r\n    }\r\n    ();\r\n}\r\n"
    },
    "time_taken": "15.5950s"
  },
  {
    "test": 88,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_FibonacciBalance.sol_FibonacciBalance.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** Reentrancy\n\nThis smart contract is vulnerable to reentrancy attacks. The `withdraw()` function calls the `setFibonacci()` function on the `_fallback` contract. This function can potentially reenter the `withdraw()` function, allowing the attacker to withdraw more funds than they are entitled to.\n\nTo fix this vulnerability, the `withdraw()` function should check the `_withdrawalCounter` before calling the `setFibonacci()` function. If the `_withdrawalCounter` has already been incremented, then the `withdraw()` function should fail.\n\nHere is an example of how to fix the vulnerability:\n\n```solidity\nfunction withdraw() public nonPayable {\n    uint256 withdrawalCounter = _withdrawalCounter;\n    _withdrawalCounter = _withdrawalCounter + 1;\n\n    v0 = _fallback.setFibonacci(withdrawalCounter).gas(msg.gas);\n    require(bool(v0));\n\n    v1 = msg.sender.call().value(stor_1 * 0xde0b6b3a7640000).gas(!(stor_1 * 0xde0b6b3a7640000) * 2300);\n    require(bool(v1), 0, RETURNDATASIZE()); // checks call status, propagates error data on error\n}\n```"
    },
    "time_taken": "13.3335s"
  },
  {
    "test": 89,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_incorrect_constructor_name2.sol_Missing.json.sol",
    "analysis": {
      "raw_response": "VULNERABLE, Reentrancy"
    },
    "time_taken": "8.3271s"
  },
  {
    "test": 90,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x9d06cbafa865037a01d322d3f4222fa3e04e5488.sol_Delta.json.sol",
    "analysis": {
      "raw_response": "**Rating:** VULNERABLE\n**Category:** Reentrancy"
    },
    "time_taken": "15.1819s"
  },
  {
    "test": 91,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x7a8721a9d64c74da899424c1b52acbf58ddc9782.sol_PrivateDeposit.json.sol",
    "analysis": {
      "raw_response": "**Rating: VULNERABLE**\n**Category: REENTRANCY**"
    },
    "time_taken": "14.5476s"
  },
  {
    "test": 92,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_BECToken.sol_BasicToken.json.sol",
    "analysis": {
      "raw_response": "**Rating:** SAFE\r\n**Category:** N/A"
    },
    "time_taken": "9.7323s"
  },
  {
    "test": 93,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_spank_chain_payment.sol_HumanStandardToken.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n54\\n[[\"di\",62],[\"af.httprm\",62,\"6608286721077049559\",7]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6636s"
  },
  {
    "test": 94,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_front_running_odds_and_evens.sol_OddsAndEvens.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",85],[\"af.httprm\",85,\"-7875532154849272239\",20]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7252s"
  },
  {
    "test": 95,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_Ownable.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",68],[\"af.httprm\",68,\"-7726839034794464864\",34]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.9404s"
  },
  {
    "test": 96,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_time_manipulation_lottopollo.sol_lottopollo.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",79],[\"af.httprm\",78,\"-6164507597512444412\",6]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "1.7249s"
  },
  {
    "test": 97,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol_Log.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",73],[\"af.httprm\",73,\"-5792891535979637487\",16]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6764s"
  },
  {
    "test": 98,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_ClockAuction.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",73],[\"af.httprm\",72,\"-251790899573143042\",14]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.8037s"
  },
  {
    "test": 99,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xcead721ef5b11f1a7b530171aab69b16c5e66b6e.sol_WALLET.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n54\\n[[\"di\",44],[\"af.httprm\",43,\"7849873258229058055\",8]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.8021s"
  },
  {
    "test": 100,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_tokensalechallenge.sol_TokenSaleChallenge.json.sol",
    "analysis": {
      "raw_response": "Rating: VULNERABLE\r\nCategory: unchecked_low_level_calls"
    },
    "time_taken": "8.1784s"
  },
  {
    "test": 101,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xb93430ce38ac4a6bb47fb1fc085ea669353fd89e.sol_PrivateBank.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",46],[\"af.httprm\",46,\"-3896780915397986679\",22]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "1.5712s"
  },
  {
    "test": 102,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_front_running_ERC20.sol_SafeMath.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",86],[\"af.httprm\",86,\"4841971149438772243\",13]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7607s"
  },
  {
    "test": 103,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x3e013fc32a54c4c5b6991ba539dcd0ec4355c859.sol_MultiplicatorX4.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",56],[\"af.httprm\",55,\"-7335666821677056348\",6]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6629s"
  },
  {
    "test": 104,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x19cf8481ea15427a98ba3cdd6d9e14690011ab10.sol_daoPOLSKAtokens.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",70],[\"af.httprm\",69,\"-4098195793274845119\",10]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6858s"
  },
  {
    "test": 105,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xa1fceeff3acc57d257b917e30c4df661401d6431.sol_AirDropContract.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n54\\n[[\"di\",71],[\"af.httprm\",71,\"7697296129962770566\",7]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.8063s"
  },
  {
    "test": 106,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x4b71ad9c1a84b9b643aa54fdd66e2dec96e8b152.sol_airPort.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",97],[\"af.httprm\",97,\"6391383592270055723\",11]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7919s"
  },
  {
    "test": 107,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_integer_overflow_mapping_sym_1.sol_IntegerOverflowMappingSym1.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",74],[\"af.httprm\",74,\"-6589904164977738617\",12]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7106s"
  },
  {
    "test": 108,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x78c2a1e91b52bca4130b6ed9edd9fbcfd4671c37.sol_WhaleGiveaway1.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",75],[\"af.httprm\",75,\"-6469122406538343830\",25]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.8998s"
  },
  {
    "test": 109,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol_Log.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",62],[\"af.httprm\",62,\"-8993094691182406730\",6]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.5196s"
  },
  {
    "test": 110,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_reentrancy_bonus.sol_Reentrancy_bonus.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",54],[\"af.httprm\",54,\"3385206644890231747\",14]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6901s"
  },
  {
    "test": 111,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_BECToken.sol_BecToken.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n54\\n[[\"di\",87],[\"af.httprm\",87,\"5147494304390866450\",6]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.5567s"
  },
  {
    "test": 112,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_BECToken.sol_PausableToken.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",48],[\"af.httprm\",48,\"-9105038690161837263\",87]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.8635s"
  },
  {
    "test": 113,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_spank_chain_payment.sol_ECTools.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n54\\n[[\"di\",50],[\"af.httprm\",50,\"7072200378724867454\",9]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.8846s"
  },
  {
    "test": 114,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_token.sol_Token.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",62],[\"af.httprm\",62,\"-8717540898497448879\",6]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.5160s"
  },
  {
    "test": 115,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x3f2ef511aa6e75231e4deafc7a3d2ecab3741de2.sol_WhaleGiveaway2.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",52],[\"af.httprm\",52,\"-1923654029411481455\",8]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.5835s"
  },
  {
    "test": 116,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_parity_wallet_bug_2.sol_WalletEvents.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",82],[\"af.httprm\",82,\"-6229859114225059977\",6]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6512s"
  },
  {
    "test": 117,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_bad_randomness_old_blockhash.sol_PredictTheBlockHashChallenge.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",47],[\"af.httprm\",47,\"-8200650106066206201\",8]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6751s"
  },
  {
    "test": 118,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_rubixi.sol_Rubixi.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",83],[\"af.httprm\",83,\"5754657416477219106\",12]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6426s"
  },
  {
    "test": 119,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol_PERSONAL_BANK.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",86],[\"af.httprm\",86,\"-8986902429998507131\",19]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6660s"
  },
  {
    "test": 120,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x89c1b3807d4c67df034fffb62f3509561218d30b.sol_TownCrier.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n54\\n[[\"di\",63],[\"af.httprm\",62,\"6291603195344617308\",7]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7777s"
  },
  {
    "test": 121,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_time_manipulation_governmental_survey.sol_Governmental.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",52],[\"af.httprm\",51,\"1440403903842108826\",10]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7502s"
  },
  {
    "test": 122,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_time_manipulation_governmental_survey.sol_Attacker.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",68],[\"af.httprm\",68,\"5094583503121602763\",10]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7325s"
  },
  {
    "test": 123,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_wallet_03_wrong_constructor.sol_Wallet.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",67],[\"af.httprm\",66,\"-4574341507122359625\",15]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7173s"
  },
  {
    "test": 124,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_ERC721Metadata.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n54\\n[[\"di\",67],[\"af.httprm\",67,\"8965710357106435748\",8]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6787s"
  },
  {
    "test": 125,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol_WedIndex.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",89],[\"af.httprm\",88,\"-7930667378904683446\",8]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.8806s"
  },
  {
    "test": 126,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_other_open_address_lottery.sol_OpenAddressLottery.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n54\\n[[\"di\",80],[\"af.httprm\",80,\"4400972740255440926\",7]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.5815s"
  },
  {
    "test": 127,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xe09b1ab8111c2729a76f16de96bc86a7af837928.sol_FiftyFlip.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",60],[\"af.httprm\",59,\"2362327011004792208\",12]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6490s"
  },
  {
    "test": 128,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x8fd1e427396ddb511533cf9abdbebd0a7e08da35.sol_Token.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n54\\n[[\"di\",56],[\"af.httprm\",56,\"7355998041727249553\",9]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6957s"
  },
  {
    "test": 129,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_PandaAccessControl.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",83],[\"af.httprm\",83,\"-4635918067205815180\",8]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7629s"
  },
  {
    "test": 130,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_front_running_eth_tx_order_dependence_minimal.sol_EthTxOrderDependenceMinimal.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",85],[\"af.httprm\",84,\"-5993239401398402700\",13]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7110s"
  },
  {
    "test": 131,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_etherbank.sol_EtherBank.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n57\\n[[\"di\",134],[\"af.httprm\",134,\"-4465767968462438627\",9]]\\n25\\n[[\"e\",4,null,null,132]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7309s"
  },
  {
    "test": 132,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_wallet_04_confused_sign.sol_Wallet.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n54\\n[[\"di\",54],[\"af.httprm\",54,\"2752947439606103792\",6]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.9974s"
  },
  {
    "test": 133,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol_Log.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",69],[\"af.httprm\",69,\"-6010409584475367156\",25]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6944s"
  },
  {
    "test": 134,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_modifier_reentrancy.sol_Bank.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",67],[\"af.httprm\",67,\"-815594148194657587\",15]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.5136s"
  },
  {
    "test": 135,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x5aa88d2901c68fda244f1d0584400368d2c8e739.sol_MultiplicatorX3.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",79],[\"af.httprm\",78,\"7304193656840594066\",13]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.5980s"
  },
  {
    "test": 136,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_integer_overflow_multitx_multifunc_feasible.sol_IntegerOverflowMultiTxMultiFuncFeasible.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",77],[\"af.httprm\",77,\"-6074099277091979762\",15]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6995s"
  },
  {
    "test": 137,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_Pausable.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",72],[\"af.httprm\",71,\"-2685346415356063002\",12]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "1.0154s"
  },
  {
    "test": 138,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_king_of_the_ether_throne.sol_KingOfTheEtherThrone.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n57\\n[[\"di\",66],[\"af.httprm\",65,\"-6883201965329710648\",245]]\\n25\\n[[\"e\",4,null,null,132]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "1.4185s"
  },
  {
    "test": 139,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xa46edd6a9a93feec36576ee5048146870ea2c3ae.sol_EBU.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",81],[\"af.httprm\",81,\"5171045140623851011\",11]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.8534s"
  },
  {
    "test": 140,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_denial_of_service_send_loop.sol_Refunder.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",62],[\"af.httprm\",61,\"-1505693227089844624\",24]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.7528s"
  },
  {
    "test": 141,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x8c7777c45481dba411450c228cb692ac3d550344.sol_Log.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",100],[\"af.httprm\",99,\"-672432786112870115\",8]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.8002s"
  },
  {
    "test": 142,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xe82f0742a71a02b9e9ffc142fdcb6eb1ed06fb87.sol_Freebie.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n54\\n[[\"di\",65],[\"af.httprm\",64,\"-710776699621748134\",6]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.6021s"
  },
  {
    "test": 143,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_time_manipulation_roulette.sol_Roulette.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",64],[\"af.httprm\",63,\"-7946158154242289043\",10]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.9509s"
  },
  {
    "test": 144,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_denial_of_service_dos_simple.sol_DosOneFunc.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n57\\n[[\"di\",73],[\"af.httprm\",72,\"-6659516890142397406\",229]]\\n25\\n[[\"e\",4,null,null,132]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "1.8346s"
  },
  {
    "test": 145,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_etherpot_lotto.sol_Lotto.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n56\\n[[\"di\",57],[\"af.httprm\",56,\"-8885103779037392531\",85]]\\n25\\n[[\"e\",4,null,null,131]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "5.0139s"
  },
  {
    "test": 146,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x958a8f594101d2c0485a52319f29b2647f2ebc06.sol_Marriage.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n57\\n[[\"di\",87],[\"af.httprm\",87,\"-2569675315205050417\",292]]\\n25\\n[[\"e\",4,null,null,132]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "7.3435s"
  },
  {
    "test": 147,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xb37f18af15bafb869a065b61fc83cfc44ed9cc27.sol_SimpleWallet.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n55\\n[[\"di\",63],[\"af.httprm\",63,\"3435896219397111008\",44]]\\n25\\n[[\"e\",4,null,null,130]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.8804s"
  },
  {
    "test": 148,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_BECToken.sol_Ownable.json.sol",
    "analysis": {
      "raw_response": "Response Error: b')]}\\'\\n\\n38\\n[[\"wrb.fr\",null,null,null,null,[8]]]\\n54\\n[[\"di\",69],[\"af.httprm\",68,\"8264485627973844811\",9]]\\n25\\n[[\"e\",4,null,null,129]]\\n'. \nUnable to get response.\nPlease double-check the cookie values and verify your network environment or google account."
    },
    "time_taken": "0.5171s"
  },
  {
    "test": 149,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_BECToken.sol_StandardToken.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.4429s"
  },
  {
    "test": 150,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_arbitrary_location_write_simple.sol_Wallet.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.9801s"
  },
  {
    "test": 151,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_PandaBreeding.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.5990s"
  },
  {
    "test": 152,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xf015c35649c82f5467c9c74b7f28ee67665aad68.sol_MY_BANK.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.6851s"
  },
  {
    "test": 153,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x806a6bd219f162442d992bdc4ee6eba1f2c5a707.sol_Pie.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.6533s"
  },
  {
    "test": 154,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_overflow_single_tx.sol_IntegerOverflowSingleTransaction.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.5764s"
  },
  {
    "test": 155,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x4051334adc52057aca763453820cb0e045076ef3.sol_airdrop.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.3281s"
  },
  {
    "test": 156,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_phishable.sol_Phishable.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.5657s"
  },
  {
    "test": 157,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xbaa3de6504690efb064420d89e871c27065cdd52.sol_Proxy.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.7044s"
  },
  {
    "test": 158,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x8fd1e427396ddb511533cf9abdbebd0a7e08da35.sol_TokenBank.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.9133s"
  },
  {
    "test": 159,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_integer_overflow_1.sol_Overflow.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.8366s"
  },
  {
    "test": 160,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_integer_overflow_add.sol_IntegerOverflowAdd.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0243s"
  },
  {
    "test": 161,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_integer_overflow_mul.sol_IntegerOverflowMul.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0938s"
  },
  {
    "test": 162,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xf29ebe930a539a60279ace72c707cba851a57707.sol_B.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0899s"
  },
  {
    "test": 163,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_overflow_simple_add.sol_Overflow_Add.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.1064s"
  },
  {
    "test": 164,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_time_manipulation_timed_crowdsale.sol_TimedCrowdsale.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0145s"
  },
  {
    "test": 165,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_modifier_reentrancy.sol_attack.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0272s"
  },
  {
    "test": 166,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_bad_randomness_lucky_doubler.sol_LuckyDoubler.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.9465s"
  },
  {
    "test": 167,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_bad_randomness_random_number_generator.sol_RandomNumberGenerator.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.2032s"
  },
  {
    "test": 168,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x561eac93c92360949ab1f1403323e6db345cbf31.sol_LogFile.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.8825s"
  },
  {
    "test": 169,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_reentrancy_cross_function.sol_Reentrancy_cross_function.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.9255s"
  },
  {
    "test": 170,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Token.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.7666s"
  },
  {
    "test": 171,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_PandaOwnership.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.1319s"
  },
  {
    "test": 172,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x01f8c4e3fa3edeb29e514cba738d87ce8c091d3f.sol_LogFile.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.7342s"
  },
  {
    "test": 173,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_TokenBank.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.2359s"
  },
  {
    "test": 174,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol_Ownable.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.1397s"
  },
  {
    "test": 175,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol_LogFile.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.8885s"
  },
  {
    "test": 176,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x7b368c4e805c3870b6c49a3f1f49f69af8662cf3.sol_W_WALLET.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.9817s"
  },
  {
    "test": 177,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_front_running_FindThisHash.sol_FindThisHash.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.1904s"
  },
  {
    "test": 178,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol_TokenBank.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.9013s"
  },
  {
    "test": 179,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_wallet_02_refund_nosub.sol_Wallet.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0453s"
  },
  {
    "test": 180,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xbebbfe5b549f5db6e6c78ca97cac19d1fb03082c.sol_VaultProxy.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.2440s"
  },
  {
    "test": 181,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xd2018bfaa266a9ec0a1a84b061640faa009def76.sol_Pie.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.2479s"
  },
  {
    "test": 182,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_bad_randomness_blackjack.sol_Deck.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.2275s"
  },
  {
    "test": 183,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Ownable.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0364s"
  },
  {
    "test": 184,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_denial_of_service_dos_address.sol_DosGas.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.1144s"
  },
  {
    "test": 185,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_integer_overflow_benign_1.sol_IntegerOverflowBenign1.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0110s"
  },
  {
    "test": 186,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_multiowned_vulnerable.sol_TestContract.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.7870s"
  },
  {
    "test": 187,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol_PRIVATE_ETH_CELL.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.2344s"
  },
  {
    "test": 188,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x663e4229142a27f00bafb5d087e1e730648314c3.sol_PandaMinting.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.1664s"
  },
  {
    "test": 189,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_denial_of_service_list_dos.sol_Government.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.2479s"
  },
  {
    "test": 190,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x96edbe868531bd23a6c05e9d0c424ea64fb1b78b.sol_LogFile.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.2224s"
  },
  {
    "test": 191,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_reentrancy_insecure.sol_Reentrancy_insecure.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.4281s"
  },
  {
    "test": 192,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x70f9eddb3931491aab1aeafbc1e7f1ca2a012db4.sol_HomeyJar.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.9172s"
  },
  {
    "test": 193,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_access_control_mycontract.sol_MyContract.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0390s"
  },
  {
    "test": 194,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x93c32845fae42c83a70e5f06214c8433665c2ab5.sol_X_WALLET.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.8259s"
  },
  {
    "test": 195,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01.sol_Token.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.2347s"
  },
  {
    "test": 196,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x8c7777c45481dba411450c228cb692ac3d550344.sol_ETH_VAULT.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.7360s"
  },
  {
    "test": 197,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x2972d548497286d18e92b5fa1f8f9139e5653fd2.sol_demo.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.9652s"
  },
  {
    "test": 198,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x39cfd754c85023648bf003bea2dd498c5612abfa.sol_Token.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.2282s"
  },
  {
    "test": 199,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol_MONEY_BOX.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.1332s"
  },
  {
    "test": 200,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_reentrance.sol_Reentrance.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0862s"
  },
  {
    "test": 201,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x958a8f594101d2c0485a52319f29b2647f2ebc06.sol_Owned.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0550s"
  },
  {
    "test": 202,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xb11b2fed6c9354f7aa2f658d3b4d7b31d8a13b77.sol_DepositProxy.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.8893s"
  },
  {
    "test": 203,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x23a91059fdc9579a9fbd0edc5f2ea0bfdb70deb4.sol_Log.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.1883s"
  },
  {
    "test": 204,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_arithmetic_integer_overflow_minimal.sol_IntegerOverflowMinimal.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0158s"
  },
  {
    "test": 205,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x524960d55174d912768678d8c606b4d50b79d7b1.sol_Centra4.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.1042s"
  },
  {
    "test": 206,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x4320e6f8c05b27ab4707cd1f6d5ce6f3e4b3a5a1.sol_ACCURAL_DEPOSIT.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0492s"
  },
  {
    "test": 207,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x84d9ec85c9c568eb332b7226a8f826d897e0a4a8.sol_Owned.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0994s"
  },
  {
    "test": 208,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_reentrancy_0x627fa62ccbb1c1b04ffaecd72a53e37fc0e17839.sol_Token.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0440s"
  },
  {
    "test": 209,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x8fd1e427396ddb511533cf9abdbebd0a7e08da35.sol_Ownable.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0212s"
  },
  {
    "test": 210,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0x07f7ecb66d788ab01dc93b9b71a88401de7d0f2e.sol_PoCGame.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "0.9072s"
  },
  {
    "test": 211,
    "file_path": "./Contracts/Decompiled/Dedaub/SmartBugs/dedaub_unchecked_low_level_calls_0xf2570186500a46986f3139f65afedc2afe4f445d.sol_RealOldFuckMaker.json.sol",
    "analysis": {
      "error": "Failed to analyze: local variable 'response' referenced before assignment"
    },
    "time_taken": "1.0303s"
  }
  
]